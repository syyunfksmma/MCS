openapi: 3.0.1
info:
  title: MCMS API
  version: 0.3.0
  description: |
    Manufacturing CAM Management System API contracts for routing, search, and file upload.
tags:
  - name: Routings
    description: Routing lifecycle operations
  - name: RoutingFiles
    description: Managed file metadata and uploads
  - name: Search
    description: Routing search endpoints
paths:
  /api/routings/{routingId}:
    get:
      tags: [Routings]
      summary: Get routing detail
      parameters:
        - $ref: '#/components/parameters/RoutingId'
      responses:
        '200':
          description: Routing detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutingDto'
        '404':
          description: Routing not found
  /api/routings/{routingId}/request-approval:
    post:
      tags: [Routings]
      summary: Request approval for a routing
      parameters:
        - $ref: '#/components/parameters/RoutingId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestRoutingApprovalRequest'
      responses:
        '200':
          description: Approval request accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutingDto'
        '404':
          description: Routing not found
        '409':
          description: Approval already pending
  /api/routings/{routingId}/approve:
    post:
      tags: [Routings]
      summary: Approve a routing
      parameters:
        - $ref: '#/components/parameters/RoutingId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproveRoutingRequest'
      responses:
        '200':
          description: Routing approved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutingDto'
        '404':
          description: Routing not found
        '409':
          description: Routing is not pending approval
  /api/routings/{routingId}/reject:
    post:
      tags: [Routings]
      summary: Reject a routing approval request
      parameters:
        - $ref: '#/components/parameters/RoutingId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RejectRoutingRequest'
      responses:
        '200':
          description: Routing rejected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutingDto'
        '404':
          description: Routing not found
        '409':
          description: Routing is not pending approval
  /api/routings/{routingId}/approval-history:
    get:
      tags: [Routings]
      summary: Retrieve approval history entries for a routing
      parameters:
        - $ref: '#/components/parameters/RoutingId'
      responses:
        '200':
          description: Approval history retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HistoryEntryDto'
        '404':
          description: Routing not found
  /api/routings/{routingId}/files:
    get:
      tags: [RoutingFiles]
      summary: Get routing file metadata and manifest
      parameters:
        - $ref: '#/components/parameters/RoutingId'
      responses:
        '200':
          description: Routing file metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutingMetaDto'
        '404':
          description: Routing not found
    post:
      tags: [RoutingFiles]
      summary: Upload a routing file and regenerate meta.json
      parameters:
        - $ref: '#/components/parameters/RoutingId'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file, fileType, uploadedBy]
              properties:
                file:
                  type: string
                  format: binary
                fileType:
                  type: string
                isPrimary:
                  type: boolean
                uploadedBy:
                  type: string
      responses:
        '200':
          description: Updated routing meta
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutingMetaDto'
        '404':
          description: Routing not found
  /api/routings/{routingId}/files/chunks/start:
    post:
      tags: [RoutingFiles]
      summary: Start a chunked file upload session
      parameters:
        - $ref: '#/components/parameters/RoutingId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartChunkUploadRequest'
      responses:
        '200':
          description: Upload session created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChunkUploadSessionDto'
        '404':
          description: Routing not found
  /api/routings/{routingId}/files/chunks/{sessionId}:
    put:
      tags: [RoutingFiles]
      summary: Upload a file chunk
      parameters:
        - $ref: '#/components/parameters/RoutingId'
        - $ref: '#/components/parameters/SessionId'
        - $ref: '#/components/parameters/ChunkIndex'
        - $ref: '#/components/parameters/ChunkChecksum'
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '204':
          description: Chunk accepted
        '404':
          description: Session or routing not found
  /api/routings/{routingId}/files/chunks/{sessionId}/complete:
    post:
      tags: [RoutingFiles]
      summary: Complete chunked upload and persist file metadata
      parameters:
        - $ref: '#/components/parameters/RoutingId'
        - $ref: '#/components/parameters/SessionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteChunkUploadRequest'
      responses:
        '200':
          description: Final routing meta after merge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutingMetaDto'
        '404':
          description: Session or routing not found
  /api/search:
    post:
      tags: [Search]
      summary: Search routings by product, owner, file type, and other filters
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoutingSearchRequest'
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutingSearchResponseDto'
components:
  parameters:
    RoutingId:
      name: routingId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    SessionId:
      name: sessionId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    ChunkIndex:
      name: X-Chunk-Index
      in: header
      required: true
      description: Zero-based chunk sequence number for the current upload session.
      schema:
        type: integer
        minimum: 0
    ChunkChecksum:
      name: X-Chunk-Checksum
      in: header
      required: false
      description: Optional lowercase SHA-256 checksum of the chunk payload (reserved for future validation).
      schema:
        type: string
        pattern: '^[0-9a-fA-F]{64}
    RoutingDto:
      type: object
      required: [id, itemRevisionId, routingCode, status, camRevision, isPrimary, steps, files, history]
      properties:
        id:
          type: string
          format: uuid
        itemRevisionId:
          type: string
          format: uuid
        routingCode:
          type: string
        status:
          type: integer
        camRevision:
          type: string
        isPrimary:
          type: boolean
        approvalStatus:
          type: integer
          nullable: true
        approvalRequestedAt:
          type: string
          format: date-time
          nullable: true
        approvalRequestedBy:
          type: string
          nullable: true
        steps:
          type: array
          items:
            $ref: '#/components/schemas/RoutingStepDto'
        files:
          type: array
          items:
            $ref: '#/components/schemas/RoutingFileDto'
        history:
          type: array
          items:
            $ref: '#/components/schemas/HistoryEntryDto'
    RoutingStepDto:
      type: object
      required: [id, sequence, machine, processDescription]
      properties:
        id:
          type: string
          format: uuid
        sequence:
          type: integer
        machine:
          type: string
        processDescription:
          type: string
        toolInformation:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
    RoutingFileDto:
      type: object
      required: [id, fileType, fileName, relativePath, fileSizeBytes, checksum, isPrimary, uploadedAt, uploadedBy]
      properties:
        id:
          type: string
          format: uuid
        fileType:
          type: integer
        fileName:
          type: string
        relativePath:
          type: string
        fileSizeBytes:
          type: integer
        checksum:
          type: string
        isPrimary:
          type: boolean
        uploadedAt:
          type: string
          format: date-time
        uploadedBy:
          type: string
    HistoryEntryDto:
      type: object
      required: [id, routingId, changeType, createdAt, createdBy]
      properties:
        id:
          type: string
          format: uuid
        routingId:
          type: string
          format: uuid
        changeType:
          type: string
        field:
          type: string
          nullable: true
        previousValue:
          type: string
          nullable: true
        currentValue:
          type: string
          nullable: true
        outcome:
          type: integer
          nullable: true
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        comment:
          type: string
          nullable: true
    RoutingMetaDto:
      type: object
      required: [routingId, files]
      properties:
        routingId:
          type: string
          format: uuid
        camRevision:
          type: string
          nullable: true
        metaPath:
          type: string
        files:
          type: array
          items:
            $ref: '#/components/schemas/RoutingMetaFileDto'
        latestHistoryId:
          type: string
          format: uuid
          nullable: true
    RoutingMetaFileDto:
      type: object
      required: [fileName, fileType, relativePath, checksum, uploadedBy, uploadedAt]
      properties:
        fileName:
          type: string
        fileType:
          type: string
        relativePath:
          type: string
        checksum:
          type: string
        isPrimary:
          type: boolean
        uploadedBy:
          type: string
        uploadedAt:
          type: string
          format: date-time
    RequestRoutingApprovalRequest:
      type: object
      required: [requestedBy]
      properties:
        requestedBy:
          type: string
        comments:
          type: string
          nullable: true
    ApproveRoutingRequest:
      type: object
      required: [approvedBy]
      properties:
        approvedBy:
          type: string
        comments:
          type: string
          nullable: true
    RejectRoutingRequest:
      type: object
      required: [rejectedBy, reason]
      properties:
        rejectedBy:
          type: string
        reason:
          type: string
    StartChunkUploadRequest:
      type: object
      required: [fileName, fileType, totalSizeBytes, chunkSizeBytes, uploadedBy]
      properties:
        fileName:
          type: string
        fileType:
          type: string
        totalSizeBytes:
          type: integer
        chunkSizeBytes:
          type: integer
        uploadedBy:
          type: string
    ChunkUploadSessionDto:
      type: object
      required: [sessionId, expiresAt, chunkSizeBytes, totalChunks]
      properties:
        sessionId:
          type: string
          format: uuid
        expiresAt:
          type: string
          format: date-time
        chunkSizeBytes:
          type: integer
        totalChunks:
          type: integer
    CompleteChunkUploadRequest:
      type: object
      required: [checksum]
      properties:
        checksum:
          type: string
        isPrimary:
          type: boolean
          nullable: true
    RoutingSearchRequest:
      type: object
      required: [term]
      properties:
        term:
          type: string
        filters:
          type: object
          properties:
            productCode:
              type: string
            groupId:
              type: string
            fileType:
              type: string
            owner:
              type: string
            updatedAfter:
              type: string
              format: date-time
            updatedBefore:
              type: string
              format: date-time
        page:
          type: integer
          minimum: 1
          default: 1
        pageSize:
          type: integer
          minimum: 1
          maximum: 200
          default: 25
        slaTargetMs:
          type: integer
          default: 1500
    RoutingSearchResponseDto:
      type: object
      required: [items, total, generatedAt, source]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/RoutingSearchItemDto'
        total:
          type: integer
        generatedAt:
          type: string
          format: date-time
        source:
          type: string
          enum: [mock, api]
        slaMs:
          type: integer
          nullable: true
    RoutingSearchItemDto:
      type: object
      required: [routingId, routingCode, productCode, revisionCode, groupName, status]
      properties:
        routingId:
          type: string
          format: uuid
        routingCode:
          type: string
        productCode:
          type: string
        revisionCode:
          type: string
        groupName:
          type: string
        status:
          type: string
        updatedAt:
          type: string
          format: date-time
          nullable: true
        sharedDrivePath:
          type: string
          nullable: true





  schemas:
    RoutingDto:
      type: object
      required: [id, itemRevisionId, routingCode, status, camRevision, isPrimary, steps, files, history]
      properties:
        id:
          type: string
          format: uuid
        itemRevisionId:
          type: string
          format: uuid
        routingCode:
          type: string
        status:
          type: integer
        camRevision:
          type: string
        isPrimary:
          type: boolean
        approvalStatus:
          type: integer
          nullable: true
        approvalRequestedAt:
          type: string
          format: date-time
          nullable: true
        approvalRequestedBy:
          type: string
          nullable: true
        steps:
          type: array
          items:
            $ref: '#/components/schemas/RoutingStepDto'
        files:
          type: array
          items:
            $ref: '#/components/schemas/RoutingFileDto'
        history:
          type: array
          items:
            $ref: '#/components/schemas/HistoryEntryDto'
    RoutingStepDto:
      type: object
      required: [id, sequence, machine, processDescription]
      properties:
        id:
          type: string
          format: uuid
        sequence:
          type: integer
        machine:
          type: string
        processDescription:
          type: string
        toolInformation:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
    RoutingFileDto:
      type: object
      required: [id, fileType, fileName, relativePath, fileSizeBytes, checksum, isPrimary, uploadedAt, uploadedBy]
      properties:
        id:
          type: string
          format: uuid
        fileType:
          type: integer
        fileName:
          type: string
        relativePath:
          type: string
        fileSizeBytes:
          type: integer
        checksum:
          type: string
        isPrimary:
          type: boolean
        uploadedAt:
          type: string
          format: date-time
        uploadedBy:
          type: string
    HistoryEntryDto:
      type: object
      required: [id, routingId, changeType, createdAt, createdBy]
      properties:
        id:
          type: string
          format: uuid
        routingId:
          type: string
          format: uuid
        changeType:
          type: string
        field:
          type: string
          nullable: true
        previousValue:
          type: string
          nullable: true
        currentValue:
          type: string
          nullable: true
        outcome:
          type: integer
          nullable: true
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        comment:
          type: string
          nullable: true
    RoutingMetaDto:
      type: object
      required: [routingId, files]
      properties:
        routingId:
          type: string
          format: uuid
        camRevision:
          type: string
          nullable: true
        metaPath:
          type: string
        files:
          type: array
          items:
            $ref: '#/components/schemas/RoutingMetaFileDto'
        latestHistoryId:
          type: string
          format: uuid
          nullable: true
    RoutingMetaFileDto:
      type: object
      required: [fileName, fileType, relativePath, checksum, uploadedBy, uploadedAt]
      properties:
        fileName:
          type: string
        fileType:
          type: string
        relativePath:
          type: string
        checksum:
          type: string
        isPrimary:
          type: boolean
        uploadedBy:
          type: string
        uploadedAt:
          type: string
          format: date-time
    RequestRoutingApprovalRequest:
      type: object
      required: [requestedBy]
      properties:
        requestedBy:
          type: string
        comments:
          type: string
          nullable: true
    ApproveRoutingRequest:
      type: object
      required: [approvedBy]
      properties:
        approvedBy:
          type: string
        comments:
          type: string
          nullable: true
    RejectRoutingRequest:
      type: object
      required: [rejectedBy, reason]
      properties:
        rejectedBy:
          type: string
        reason:
          type: string
    StartChunkUploadRequest:
      type: object
      required: [fileName, fileType, totalSizeBytes, chunkSizeBytes, uploadedBy]
      properties:
        fileName:
          type: string
        fileType:
          type: string
        totalSizeBytes:
          type: integer
        chunkSizeBytes:
          type: integer
        uploadedBy:
          type: string
    ChunkUploadSessionDto:
      type: object
      required: [sessionId, expiresAt, chunkSizeBytes, totalChunks]
      properties:
        sessionId:
          type: string
          format: uuid
        expiresAt:
          type: string
          format: date-time
        chunkSizeBytes:
          type: integer
        totalChunks:
          type: integer
    CompleteChunkUploadRequest:
      type: object
      required: [checksum]
      properties:
        checksum:
          type: string
        isPrimary:
          type: boolean
          nullable: true
    RoutingSearchRequest:
      type: object
      required: [term]
      properties:
        term:
          type: string
        filters:
          type: object
          properties:
            productCode:
              type: string
            groupId:
              type: string
            fileType:
              type: string
            owner:
              type: string
            updatedAfter:
              type: string
              format: date-time
            updatedBefore:
              type: string
              format: date-time
        page:
          type: integer
          minimum: 1
          default: 1
        pageSize:
          type: integer
          minimum: 1
          maximum: 200
          default: 25
        slaTargetMs:
          type: integer
          default: 1500
    RoutingSearchResponseDto:
      type: object
      required: [items, total, generatedAt, source]
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/RoutingSearchItemDto'
        total:
          type: integer
        generatedAt:
          type: string
          format: date-time
        source:
          type: string
          enum: [mock, api]
        slaMs:
          type: integer
          nullable: true
    RoutingSearchItemDto:
      type: object
      required: [routingId, routingCode, productCode, revisionCode, groupName, status]
      properties:
        routingId:
          type: string
          format: uuid
        routingCode:
          type: string
        productCode:
          type: string
        revisionCode:
          type: string
        groupName:
          type: string
        status:
          type: string
        updatedAt:
          type: string
          format: date-time
          nullable: true
        sharedDrivePath:
          type: string
          nullable: true





